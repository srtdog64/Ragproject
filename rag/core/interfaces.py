# core/interfaces.py
from __future__ import annotations
from typing import Protocol, List, Dict, Any, Optional
from core.types import Document, Chunk, Retrieved, RagContext, Answer
from core.result import Result

class Chunker(Protocol):
    def chunk(self, doc: Document) -> List[Chunk]: ...

class Embedder(Protocol):
    def embedTexts(self, texts: List[str]) -> List[List[float]]: ...

class VectorStore(Protocol):
    def addMany(self, chunks: List[Chunk], vectors: List[List[float]]) -> None: ...
    def upsert(self, chunk: Chunk, vector: List[float]) -> None: ...
    def deleteByDoc(self, docId: str) -> None: ...
    def search(self, queryVector: List[float], k: int, metaFilter: Optional[Dict[str, Any]] = None) -> List[Retrieved]: ...

class Retriever(Protocol):
    async def retrieve(self, query: str, k: int) -> List[Retrieved]: ...

class Reranker(Protocol):
    def rerank(self, items: List[Retrieved]) -> List[Retrieved]: ...

class OutputParser(Protocol):
    def parse(self, text: str) -> Dict[str, Any]: ...

class LlmClient(Protocol):
    async def generate(self, prompt: str, system: Optional[str] = None) -> Result[str]: ...

class Step(Protocol):
    async def run(self, ctx: RagContext) -> Result[RagContext]: ...
